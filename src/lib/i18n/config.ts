
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏
export type LocaleCode = 'en' | 'et' | 'ru' | 'lt' | 'fi';

export const locales: Record<LocaleCode, string> = {
  'en': 'English',
  'et': 'Eesti',
  'ru': '–†—É—Å—Å–∫–∏–π',
  'lt': 'Lietuvi≈≥',
  'fi': 'Suomi'
};

export const countries: Record<string, {name: string, locales: LocaleCode[], flag: string}> = {
  'global': {
    name: 'Global',
    locales: ['en'],
    flag: 'üåê'
  },
  'et': {
    name: 'Estonia',
    locales: ['et', 'ru'],
    flag: 'üá™üá™'
  },
  'lt': {
    name: 'Lithuania',
    locales: ['lt'],
    flag: 'üá±üáπ'
  },
  'fi': {
    name: 'Finland',
    locales: ['fi'],
    flag: 'üá´üáÆ'
  }
};

// URLs —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
export const urlMappings: Record<string, Record<LocaleCode, string>> = {
  'credits': {
    'en': 'credits',
    'et': 'laenud',
    'ru': 'kredity',
    'lt': 'paskolos',
    'fi': 'laina'
  },
  'about': {
    'en': 'about',
    'et': 'meist',
    'ru': 'o-nas',
    'lt': 'apie-mus',
    'fi': 'keita-me-olemme'
  },
  'privacy': {
    'en': 'privacy',
    'et': 'privaatsus',
    'ru': 'konfidentsialnost',
    'lt': 'privatumas',
    'fi': 'yksityisyys'
  },
  'lenders': {
    'en': 'lenders',
    'et': 'laenupakkujad',
    'ru': 'kreditory',
    'lt': 'skolintojai',
    'fi': 'lainanantajat'
  },
  'faq': {
    'en': 'faq',
    'et': 'kkk',
    'ru': 'faq',
    'lt': 'duk',
    'fi': 'ukk'
  }
};

// URL —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ —Å—Ç—Ä–∞–Ω
export function getLocalizedUrl(
  country: string, 
  locale: LocaleCode, 
  page: string = '', 
  params: string = ''
): string {
  // –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
  if (country === 'global' && locale === 'en') {
    return page ? `/${page}${params ? `/${params}` : ''}` : '/';
  }
  
  // –î–ª—è –≠—Å—Ç–æ–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  if (country === 'et' && locale === 'ru') {
    return `/${country}-${locale}${page ? `/${urlMappings[page]?.[locale] || page}` : ''}${params ? `/${params}` : ''}`;
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  return `/${country}${page ? `/${urlMappings[page]?.[locale] || page}` : ''}${params ? `/${params}` : ''}`;
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ hreflang —Å–≤—è–∑–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
export function getHreflangLinks(
  country: string, 
  currentLocale: LocaleCode, 
  page: string = '', 
  params: string = ''
): Record<string, string> {
  const links: Record<string, string> = {};
  
  // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã - —Å–≤—è–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏
  if (country !== 'global') {
    const countryData = countries[country];
    if (countryData) {
      countryData.locales.forEach(locale => {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è hreflang
        const hreflangCode = country === 'et' && locale === 'ru' 
          ? 'ru-EE' 
          : `${locale}-${country.toUpperCase()}`;
          
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è hreflang
        links[hreflangCode] = getLocalizedUrl(country, locale, page, params);
      });
    }
  }
  
  return links;
}
